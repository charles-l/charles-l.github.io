<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Charlie The Ninja</title>
    <link href="http://charliethe.ninja/atom.xml" rel="self" />
    <link href="http://charliethe.ninja" />
    <id>http://charliethe.ninja/atom.xml</id>
    <author>
        <name>Charles Saternos</name>
        <email></email>
    </author>
    <updated>2015-12-28T09:43:29Z</updated>
    <entry>
    <title>Intro to Git (Part 1)</title>
    <link href="http://charliethe.ninja/posts/2015-12-28-intro-to-git-p1.html" />
    <id>http://charliethe.ninja/posts/2015-12-28-intro-to-git-p1.html</id>
    <published>2015-12-28T09:43:29Z</published>
    <updated>2015-12-28T09:43:29Z</updated>
    <summary type="html"><![CDATA[<style>
img.middle {
  display: block;
  margin-right: auto;
  margin-left: auto;
}
</style>
<p><code>git - the stupid content tracker</code></p>
<p>Well… the man pages are certainly stupid.</p>
<pre><code>GIT-REBASE(1)

NAME
   git-rebase - Forward-port local commits to the updated upstream head

SYNOPSIS
   git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;]
           [&lt;upstream&gt; [&lt;branch&gt;]]
   git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;]
           --root [&lt;branch&gt;]
   git rebase --continue | --skip | --abort | --edit-todo</code></pre>
<p><small><small>Seriously, just look up your questions on stack overflow. You’ll get better explanations/examples.</small></small></p>
<p>I mean c’mon. I’ve haven’t been this confused by a manpage since I tried to read <code>sudoers(5)</code>.</p>
<p>Aside from the built in documentation, git is pretty awesome. It’s saved my butt on more than one occasion and is a regular part of my workflow. Besides, it’s an industrial standard at this point, so it’s worth knowing.</p>
<h3 id="why-you-should-be-using-git">Why you should be using git</h3>
<p>Git is a version control system. It saves snapshots of your code in a “repository” and allows you to organize and view this history so you can:</p>
<ul>
<li>back up code</li>
<li>view old code</li>
<li>recover old code</li>
<li>find where bugs first appeared</li>
<li>easily collaborate with others</li>
<li>figure out who to blame when things break (I’m not kidding: see <code>git blame</code>)</li>
<li>work on new features without accidentally breaking important code</li>
<li>control where code goes (seems vague now, but you’ll learn more about this in part 2)</li>
</ul>
<p>Sounds pretty great, huh? There are a few commands/concepts to learn, but it’s not terribly difficult, and you can pick up the basics in a few minutes.</p>
<h3 id="install-it">Install it</h3>
<p><code>brew</code> it, <code>apt-get</code> it, <code>pacman -S</code> it – use whatever package manager you have to install. If you’re on Windows <sup>:’( TM</sup> you can download a <a href="http://www.git-scm.com/downloads">git shell</a>.</p>
<h3 id="on-guis">On GUIs</h3>
<p>There are many GUIs available for git. They can be useful sometimes when visualizing a repo’s history (although I personally like <code>git log --graph</code> in every case). However, I <strong>DO NOT</strong> recommend using one when you’re learning git. Knowing the commands will allow you to get out of sticky situations, and CLIs will almost always beat GUIs in efficiency, ease of automation, and speed, even though they require a bit of learning.</p>
<h3 id="but-first-some-pictures">But first, some pictures</h3>
<p>Git history is stored in a series of commits (a commit is a snapshot of the code).</p>
<div class="figure">
<img src="/images/git_1.png" alt="git_1" />
<p class="caption">git_1</p>
</div>
<p>Commits are stored in branches.</p>
<div class="figure">
<img src="/images/git_2.png" alt="git_2" />
<p class="caption">git_2</p>
</div>
<p>The main branch is called <code>master</code>:</p>
<div class="figure">
<img src="/images/git_3.png" alt="git_3" />
<p class="caption">git_3</p>
</div>
<p>Not bad so far.</p>
<p><img src="/images/piece_o_cake.jpg" width=200/></p>
<h3 id="your-code-is-in-many-places">Your code is in many places</h3>
<p>If git is anything, it’s redundant. You, your fellow developer, your grandmother and your dog all have their own copy of the entire codebase.</p>
<div class="figure">
<img src="/images/repo.png" alt="repo" />
<p class="caption">repo</p>
</div>
<p>Whenever you modify the git history or add a new commit, you are operating on your <em>local</em> repository.</p>
<p>When you are working with others, you’ll often have a central repo called a “remote”. You <em>push</em> and <em>pull</em> code to and from a remote.</p>
<p><img class="middle" src="/images/push_pull.png"/></p>
<div class="invert white">
<p><b>REMEMBER!</b> No one can see your local commits until you push them to the remote</p>
</div>
<p>You don’t necessarily have to push to/pull from the remote though. If you want, you can push to your dog’s repo, then pull code from Grandma’s repo (if you have the IPs/permissions).</p>
<p>The code is therefore distributed amongst everybody who is working on it. If the main remote goes down, everyone simply can push to a new remote repo and everything is as it was before.</p>
<h3 id="lets-learn-some-commands">Let’s learn some commands!</h3>
<h4 id="git-setup-101">GIT SETUP 101</h4>
<pre class="sh"><code>git init # 1.
git remote add origin https://github.com/username/new_repo # 2.</code></pre>
<ol style="list-style-type: decimal">
<li>You’re project is now gitified! Congrats!</li>
<li>Add a remote, and name it <code>origin</code>. This is the conventional name for the main remote. You have to have a remote before doing this, so go <a href="https://github.com/join">sign up for GitHub</a> and <a href="https://github.com/new">create a new repo</a>.</li>
</ol>
<h4 id="commit-yo-code">COMMIT YO CODE</h4>
<p>This is all you need to do to create a commit containing all changes you’ve made since the last commit, then push it (you’ll be pushing your changes to your new GitHub remote):</p>
<pre class="sh"><code>git add --all # (1.)
git commit -m &quot;a wild commit message appears!&quot; # (2.)
git push origin master # (3.)</code></pre>
<ol style="list-style-type: decimal">
<li>You first “stage” the code changes for a commit. This just marks which files you’re going to commit (<code>--all</code> means stage every changed file).</li>
<li>Commit it (this is to the <em>local</em> repo). If you don’t specify a message with <code>-m</code>, it’ll pop open an editor so you can add a description of the commit.</li>
<li>Push the <code>master</code> branch to <code>origin</code> (type in your GitHub user and password when the prompts appear).</li>
<li>Do a little dance.</li>
</ol>
<p><img class="middle" src="/images/dancing_groot2.gif" width="300"/></p>
<p>Run the above commands anytime you want to add a new commit.</p>
<h4 id="pull-new-code-yo">PULL NEW CODE YO</h4>
<pre class="sh"><code>git pull origin master #(1.)</code></pre>
<ol style="list-style-type: decimal">
<li>Pull the code from the master branch of the remote (type in your GitHub user and password when the prompts appear).</li>
<li>Do another little dance.</li>
</ol>
<p><img class="middle" src="/images/dancing_groot.gif" width="300"/></p>
<h3 id="what-you-now-know">What you now know</h3>
<p>Give yourself a pat on the back. You now have a basic understanding of git, and can:</p>
<ul>
<li>create a repo (<code>git init</code>)</li>
<li>add a remote (<code>git remote add</code>)</li>
<li>stage files (<code>git add</code>)</li>
<li>commit staged files (<code>git commit</code>)</li>
<li>push commits to a remote (<code>git push</code>)</li>
<li>pull new commits from a remote (<code>git pull</code>)</li>
</ul>
<hr />
<p>That’s all for the first part. In the next part, you’ll learn more about branches and remotes, and how “git flow” works.</p>
<p>Let me know what you think <a href="https://twitter.com/theninjacharlie">on twitter</a></p>]]></summary>
</entry>
<entry>
    <title>No syntax highlighting??!!</title>
    <link href="http://charliethe.ninja/posts/2015-11-19-no-syntax-highlighting.html" />
    <id>http://charliethe.ninja/posts/2015-11-19-no-syntax-highlighting.html</id>
    <published>2015-11-19T00:00:00Z</published>
    <updated>2015-11-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Yep.</p>
<p>There have been <a href="http://www.linusakesson.net/programming/syntaxhighlighting/">many</a> <a href="http://evincarofautumn.blogspot.com/2014/12/why-i-dont-use-syntax-highlighting.html">arguments</a> <a href="https://medium.com/@MrJamesFisher/your-syntax-highlighter-is-wrong-6f83add748c9#.hxdyqwvpe">against</a> syntax highlighting. Some are a bit extreme, but the general consensus is that the colors give an incorrect meaning to the code or put emphasis where it should not be. Some people swear that monochrome coding is the only way to go, so I decided to give it a try.</p>
<p>When it comes down to it, colorschemes are primarily functional in two ways:</p>
<ul>
<li>they allow you to quickly scan and parse the contents of a string</li>
<li>and, (if you write a lot of lisp), are useful in displaying rainbow parentheses.</li>
</ul>
<p>I wrote a <a href="https://gist.github.com/charles-l/4a5b9cbd0ef6d61ba59d">tiny Vim colorscheme</a>, that colors strings and comments gray (as well as some UI so it stays out of the way). These tweaks may seem somewhat minor, but there is a noticeable difference between a minimal colorscheme and no colorscheme.</p>
<p>So, has turning off syntax highlighting changed my coding experience and unlocked a new level of potential that was inaccessible to me before? Not really. Since strings are still highlighted, I haven’t missed my old colorschemes, and perhaps I read code a bit more linearly now (rather than jumping from one highlighted word to the next), but in the end, I don’t really notice a huge change.</p>
<p>The only other advantage to a simpler colorscheme is that I’m not constantly downloading and trying out new ones. Black, white and gray show up perfectly in all terminal configurations, and I have no need for tweaking my terminal’s default base16 colors to make Vim look decent.</p>
<p>I haven’t yet given up highlighted <code>ls</code>. I guess I could change my <code>ls</code> alias from <code>ls --colors=always'</code> to <code>ls -F</code>, but I find it mentally easier to glob colors than try to differentiate between filenames/directory names with slashes on them. I also think it’s excusable because there’s less linguistic meaning behind a list of filenames than a piece of code.</p>
<p>In the end, I’m going to stick with my simpler colorscheme. If nothing else, it at prevents me from wasting time fiddling with my vimrc, and makes maintenance easier. Less is more!</p>]]></summary>
</entry>
<entry>
    <title>statnot</title>
    <link href="http://charliethe.ninja/posts/2015-9-7-statnot.html" />
    <id>http://charliethe.ninja/posts/2015-9-7-statnot.html</id>
    <published>2015-09-07T00:00:00Z</published>
    <updated>2015-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><code>libnotify</code> is kind of the standard for desktop notifications. Personally, I’m not a huge fan of dbus and friends, but <code>libnotify</code> has become a necessary evil. The popular notification daemons tend to be a little overkill, and I was hoping to integrate my notifications with a cannibalized version of a popup that uses <a href="https://github.com/LemonBoy/bar">lemonbar</a> (thanks <a href="http://blog.z3bra.org/2014/04/pop-it-up.html">z3bra</a>!). Rather than getting another notification center that required it’s own extra styling, I looked around for a libnotify daemon that would call a shell script and pass it the notification contents.</p>
<p>Initially, I was going to write a C program on my own, but the awful lack of C documentation for <code>libnotify</code> coupled with the hate of dbus, I eventually found a non-sucky python script that did what I wanted.</p>
<p><a href="https://github.com/halhen/statnot"><code>statnot</code></a>, is very simple to configure. Just add the following to <code>~/.config/statnot/statnotrc</code>:</p>
<pre><code>STATUS_COMMAND = [&#39;/bin/sh&#39;, &#39;/home/ninjacharlie/bin/popup&#39;]</code></pre>
<p>And add this to <code>~/.xinitrc</code>:</p>
<pre><code>...
statnot /home/ninjacharlie/.config/statnot/statnotrc &amp;
...</code></pre>
<p>Once you restart X, you should see notifications pop up when you pause/play Spotify songs or run a <code>notify-send</code> command.</p>]]></summary>
</entry>
<entry>
    <title>stow</title>
    <link href="http://charliethe.ninja/posts/2015-9-6-stow.html" />
    <id>http://charliethe.ninja/posts/2015-9-6-stow.html</id>
    <published>2015-09-06T09:43:29Z</published>
    <updated>2015-09-06T09:43:29Z</updated>
    <summary type="html"><![CDATA[<p>Everyone’s got dotfiles, and some of us like to keep ’em on GitHub. For me, the hardest part with this is getting all of the files in place after I cloned the repo. I had written a hacked up shell script, but it wasn’t really holding up to lots of use. Whenever I added a new file to the repo, it was a giant pain to have to update the install script as well.</p>
<h3 id="enter-stow">Enter <code>stow</code></h3>
<p>I’m not a huge GNU fan<sup>1</sup>, but they did get something write with this one. <code>stow</code> is a little util that symlinks the files inside a directory to the parent directory (while retaining the tree structure). So, if we take a look at my dotfiles (simplified for sanity)…</p>
<pre><code>/home/ninjacharlie/.dotfiles
├── bin
│   └── bin
│       ├── colortest
│       ├── dm
│       └── ...
├── git
│   └── gitignore_global
├── i3
├── mksh
│   └── .mkshrc
├── README.md
├── shell
│   └── .sh
│       ├── aliases.sh
│       └── funcs.sh
├── tmux
└── vim</code></pre>
<p>… and I want to just symlink my shell configuration files, I can <code>cd</code> to <code>~/.dotfiles</code> and run:</p>
<pre><code>stow mksh
stow shell</code></pre>
<p>And voilà, I now have my <code>~/.mkshrc</code> file and <code>~/.sh/</code> dir set up and ready to sync.</p>
<p>This utility is useful in any situation where lots of symlinks are flying around. You could use it to symlink the files in <code>~/bin</code> to <code>/usr/local/bin</code>, or (if you’re a little crazy), you could symlink and track all the files in <code>/etc</code>.</p>
<p>[1] Overengineering and bloated codebases, but there are worse organizations/projects out there (<em>cough</em> <em>chough</em> freedesktop <em>cough</em> <em>cough</em>)</p>]]></summary>
</entry>
<entry>
    <title>Introduction to C</title>
    <link href="http://charliethe.ninja/posts/2015-5-29-intro_to_c.html" />
    <id>http://charliethe.ninja/posts/2015-5-29-intro_to_c.html</id>
    <published>2015-05-29T09:43:29Z</published>
    <updated>2015-05-29T09:43:29Z</updated>
    <summary type="html"><![CDATA[<p>An introduction to C for the high-level programmer. <a href="/slideshow/english/introtoc.html">Follow dis link</a>.</p>
<p><em>Update July 2015</em></p>
<p>There’s now a <a href="/slideshow/russian/introtoc.html">Russian version</a> of the slideshow, thanks to <a href="https://github.com/mokeev1995">mokeev1995</a></p>]]></summary>
</entry>
<entry>
    <title>synergy</title>
    <link href="http://charliethe.ninja/posts/2015-5-14-synergy.html" />
    <id>http://charliethe.ninja/posts/2015-5-14-synergy.html</id>
    <published>2015-05-14T09:43:29Z</published>
    <updated>2015-05-14T09:43:29Z</updated>
    <summary type="html"><![CDATA[<p><em>AHH! BUZZWORD!</em></p>
<p>Don’t worry. I’m just talking about a super awesome piece of software. Though, I do normally recoil when I hear that word.</p>
<p>The <a href="https://github.com/synergy/synergy/">synergy</a> I’m talking about is a cross-platform app that allows you to control multiple computers with just one keyboard and mouse over wifi. It’s kind of a KVM for multiple devices (but it shares your clipboard across!)</p>
<p>Building it on OS X 10.10 is a little bit of a pain (you’ll have to hack around in the python build script, and the CMake config), but once you do, it’s a fire-and-forget type of thing that just works. I’ve been happily using it with OS X and <a href="https://wiki.archlinux.org/index.php/Synergy">Arch Linux</a> for a few days now.</p>
<hr />
<p>On Arch, I’ve <a href="http://www.reddit.com/r/unixporn">riced</a> my setup pretty hard. I use <a href="https://github.com/LemonBoy/bar">lemonbar</a>, which isn’t technically a system tray (you simply pipe content to it when you start X). Synergy will fail to start unless you have a tray, so I just wrote a tiny shell script wrapper to start <a href="https://www.archlinux.org/packages/extra/i686/trayer/">trayer</a> and synergy:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">killall</span> synergy <span class="co"># in case I already have an instance running</span>
<span class="kw">trayer</span> <span class="kw">&amp;</span>
<span class="kw">synergy</span> <span class="kw">&amp;</span>
<span class="kw">sleep</span> 1
<span class="kw">killall</span> trayer</code></pre></div>
<p>Then move synergy to another desktop or <a href="http://blog.z3bra.org/2014/11/avoid-workspaces.html">group</a>, and proceed upon your merry way.</p>]]></summary>
</entry>
<entry>
    <title>Asus T100 and Linux</title>
    <link href="http://charliethe.ninja/posts/2015-5-13-asus_t100_linux.html" />
    <id>http://charliethe.ninja/posts/2015-5-13-asus_t100_linux.html</id>
    <published>2015-05-13T09:43:29Z</published>
    <updated>2015-05-13T09:43:29Z</updated>
    <summary type="html"><![CDATA[<p>Linux support on the Asus T100 is currently pretty bad. It does run, but there are a lot of loopholes you have to jump through to get it to a working state. Unless you’re an experience Linux user, I wouldn’t recommend following this guide.</p>
<p>What’s supported out of the box: - Touchscreen - Keyboard - Hard Disk (with newer versions of the kernel)</p>
<p>What’s supported with a little extra configuration: - WiFi</p>
<p>What’s not supported (more on them later): - Sound - Synaptic trackpad (it does work as a regular mouse, though) - GPIO buttons (other than the hardwired power button) - Backlight - Accelerometer - Battery</p>
<p>The easiest way to boot Linux is to install <a href="www.rodsbooks.com/refind">rEFInd</a> and select your USB on boot. The alternative is fiddling with the Windows EFI settings, but if you plan on dual-booting, it’s easiest to go with rEFInd.</p>
<p>The biggest reason it’s difficult to install Linux on this device is because it uses 32-bit EFI, despite running a 64-bit processor. Unless your distro comes with a 32-bit EFI bootloader, you’ll need to build it and manually put it on your installation media. I used a 32-bit build of GRUB and put it in the <code>/boot/EFI</code> directory of a live Arch Linux USB.</p>
<p>When you select Linux from the rEFInd menu on boot, it’ll drop you into a GRUB recovery shell. From here, you’ll be able to select the USB device to boot:</p>
<pre><code>&gt; linux (hd0)/arch/boot/x86_64/vmlinuz-linux archisolabel=ARCH_052014
&gt; initrd (hd0)/arch/boot/x86_64/initramfs-linux.img
&gt; boot</code></pre>
<p>From here, you can install Linux. Some things to bear in mind when installing:</p>
<ol style="list-style-type: decimal">
<li>The main drive is <code>/dev/mmcblk0</code>. <code>/dev/sdb</code> is unwritable and contains a readonly recovery version of Windows.</li>
<li>Make sure you install a recent version of the kernel to have the hardware support you need.</li>
<li>If you need wireless, <em>YOU CANNOT RELY ON THE INTERNAL BROADCOM CARD DURING INSTALLATION</em>, you’ll need an external wireless adapter.</li>
</ol>
<p>If you’ve successfully installed Linux, congrats! That’s pretty much all there is to it.</p>
<hr />
<p><strike>The internal Broadcom BRC403241 chip is not well supported. You can get the firmware from the <code>linux-firmware</code> repo, but it doesn’t contain the nvram configuration which means you still can’t see the device. If you want, you can try messing around with <a href="www.github.com/jfwells/linux-asus-t100ta">reverse-engineered nvram files</a>. That’ll make the device appear and available to connect to a WiFi network. However, at it’s best, the connection lasts for only a few MB of data, then disconnects. There’s no solution currently.</strike></p>
<p><strong>EDIT May 15 2015:</strong> If you install the <code>linux-ck</code> from Arch Linux AUR, the wireless is stable enough that it works as the only wireless card. I had a blip when I was using it where it refused to connect, but after rebooting it came back.</p>
<p>The trackpad can move the mouse, but the kernel doesn’t detect it as a synaptic device so it doesn’t support multitouch.</p>
<p>As for the sound, backlight, battery and GPIO buttons, I still have to investigate them more thoroughly to see if they aren’t supported by extra kernel configuration (I’m just going with Arch’s Vanilla Kernel at the moment, which has a surprising amount of kernel support).</p>
<p>Overall, I can use it as a work machine that is nice on the go. In tablet mode, it’s becoming more useful (because of the wireless now works)</p>]]></summary>
</entry>
<entry>
    <title>Asus Transformer t100 Review</title>
    <link href="http://charliethe.ninja/posts/2015-3-18-asus-transformer-t100.html" />
    <id>http://charliethe.ninja/posts/2015-3-18-asus-transformer-t100.html</id>
    <published>2015-03-18T09:43:29Z</published>
    <updated>2015-03-18T09:43:29Z</updated>
    <summary type="html"><![CDATA[<p>Since I’ve started college, the need for a good mobile computer has become pretty important. For years, I worked on a 2013 iMac, but I now have a need for something portable (for writing papers, doing online homework, responding to e-mails, and so on). I wanted to get something that was cheap, and after looking around a little, decided I wanted a tablet/laptop transformer book thingy.</p>
<p>So I bought a refurbished Asus Transformer t100 on Amazon for $199. This was a big win. It was shockingly cheap and I’m impressed with the specs for such a little device. It’s got a quad core 1.3 GHz processor and a 32 GB SSD. It only has 2GB of RAM, which is the only aspect that is underpowered, but I can work with that.</p>
<p>The screen is extremely nice to use. It has a high pixel density (which makes it nice to look at), and the touch sensitivity is accurate (which makes it nice to use). The battery when fully charged lasts me a full day with no trouble, but there is a battery related problem that I will get to in a minute.</p>
<p>The over build quality is decent. The tablet section is thin and light, but is made out of cheapish plastic that makes an audible crinkle when squeezed. The buttons on it are awful, especially the button located below the volume rocker (that acts as a Windows button). They’re mushy and require a fair amount of pressure to use.</p>
<p>The build quality for the keyboard, on the other hand, is much better. The keys are response, despite being small, and the trackpad is reasonably sensitive. The biggest issues I have with the keyboard is the smallish size of the trackpad and a little bump in front of the space bar that makes it difficult to press if your hands aren’t close enough. The keyboard also is as thick, and weighs as much as the tablet.</p>
<p>I’m no fan of Windows, but as long as I avoid software development, it’s not terrible to use. However, I do plan on installing Linux soon. I just have to figure out how to get past the crazy UEFI secure boot crap. I have had some trouble with booting off a Linux USB, but when I figure it out, I’ll put up a post on how to do it.</p>
<p><strike>When I woke up this morning and got ready for the day’s classes, I noticed that the battery power was low, despite being plugged in all night. I have yet to verify, but I believe the power adapter has burned out after only a week of use (I really hope the battery is not dead). If it’s just the adapter, that’s annoying and disappointing, but not a show stopper. I have loads of USB to wall socket adapters sitting at home, and will happily use one in it’s place.</strike></p>
<p><strong>Update</strong>: It turns out the wall socket I plugged into is broken and won’t supply power unless the plug is held at the correct angle. The battery is fine.</p>
<p>The other big problem is the sensor that detects when the laptop is closed. I would expect the computer to go into sleep mode when I lower the lid, and it does in many cases. However, it commonly refuses to sleep and simply leaves the screen on which drains the battery quickly. I don’t know if it’s a hardware or software issue, but I currently suspect the hardware is simply not sensitive enough. If you prefer to work with it as a tablet most of the time, this is no problem, but if you use it as a laptop, bear this problem in mind.</p>
<p>Overall, I’m impressed with the quality I can get for such a cheap price, but with the price come some expected issues. None of them are radical enough to make me regret the purchase, but you may want to be aware of them when buying. My recommendation is: if you need a PC for cheap, get this tablet. There are plenty of other options out there that don’t stand up to it, especially for the price.</p>]]></summary>
</entry>
<entry>
    <title>Debugging on OSX with LLDB</title>
    <link href="http://charliethe.ninja/posts/2015-2-6-debugging_on_osx_with_lldb.html" />
    <id>http://charliethe.ninja/posts/2015-2-6-debugging_on_osx_with_lldb.html</id>
    <published>2015-02-06T12:00:00Z</published>
    <updated>2015-02-06T12:00:00Z</updated>
    <summary type="html"><![CDATA[<p>As a beginner C programmer, I’ve just recently started building projects that require real debugging that’s more complex than a simple <code>printf</code> call. The result is that I have to actually learn how to properly use a debugger.</p>
<p>I work from the command line on OS X and don’t want to bother opening a GUI and breaking my workflow, so the only real option I have is <code>lldb</code>, which is Apple’s custom version of <code>gdb</code> (which means it has have it’s own weird set of quarks, like all Apple products). If you’re used to using <code>gdb</code> there’s a <a href="http://lldb.llvm.org/lldb-gdb.html">page on the LLVM site</a> that shows what commands in <code>gdb</code> are in <code>lldb</code>.</p>
<p>Let’s look at some code we’re going to debug:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#include &lt;stdio.h&gt;</span>
<span class="ot">#include &lt;string.h&gt;</span>

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> **argv) {
        printf(<span class="st">&quot;The second arg is %s&quot;</span>, strcat(argv[<span class="dv">1</span>], <span class="st">&quot;!&quot;</span>));
        <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<p>The obvious issue with this code is in the <code>printf</code> statement that will attempt to concatinate the second argument with a ‘!’, even if it doesn’t exist. This will result in a segfault, that we will track down using <code>lldb</code>.</p>
<p>To begin, make sure you’re building your program with debug symbols, otherwise we won’t be able to set breakpoints or view what line is currently executing. Adding the <code>-g</code> flag to your compile command will build the program with debug info.</p>
<pre><code>clang -g -o mytest test.c</code></pre>
<p>Now fire up <code>lldb</code>, passing the name of your executable as the second argument:</p>
<pre><code>lldb mytest</code></pre>
<p>Type <code>l</code> into the prompt. This is an alias for the <code>source list</code> command, which allows you to see the top few lines of code in your <code>test.c</code> file.</p>
<p>Now set a breakpoint at line 5 by typing <code>b 5</code>. The breakpoint will stop execution in <code>lldb</code> when it reaches that line. This allows us to go step by step over each line of code, while analyzing the state of the program.</p>
<p>To begin the execution of your program, type <code>run</code>. Your program will run until it hits the line that we marked with a breakpoint.</p>
<p>At this point, we have the ability to see all kinds of information about the program with the help of a few commands. The first thing we want to know is value of local variables. Typing <code>fr v</code> (alias for frame variables), will show us all of the current local variables. In this case, it’s just <code>argv</code>. To drill down further, type <code>p argv</code>, to see what the array contains. Since we didn’t pass any arguments to <code>mytest</code> when we started <code>lldb</code>, it currently contains nothing but the name of executable.</p>
<p>We can now step line by line over the code and break at each point. To step, type either <code>si</code> (step into function) or <code>n</code> (step over function, or next line of execution).</p>
<p>Type <code>n</code> and to continue execution. You should get something like this:</p>
<pre><code>Process 29707 stopped
* thread #1: tid = 0x3bcaf0, 0x00007fff86063172 libsystem_c.dylib`strlen + 18, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
    frame #0: 0x00007fff86063172 libsystem_c.dylib`strlen + 18
libsystem_c.dylib`strlen + 18:
-&gt; 0x7fff86063172:  pcmpeqb (%rdi), %xmm0
   0x7fff86063176:  pmovmskb %xmm0, %esi
   0x7fff8606317a:  andq   $0xf, %rcx
   0x7fff8606317e:  orq    $-0x1, %rax</code></pre>
<p>That <code>EXC_BAD_ACCESS</code> is clang blocking us from accessing memory that wasn’t allocated by us. In this case, we are trying to access the second element of the <code>argv</code> array which was never initialized.</p>
<p>So know you know the basics of debugging with breakpoints, which is extremely useful when you have some idea where the issue is, but don’t know the exact line.</p>
<p>There are, however some cases where you don’t know where the issue is on a large scale project. If you set a breakpoint, you’ll be stepping over lines of code for thousands of steps, which doesn’t aid you in tracking down the issue. In situations like this, you can use <code>lldb</code>’s backtrace to get information about the state of the program the moment before the crash.</p>
<p>After loading your program and typing <code>run</code> (no need to set a breakpoint), the program will crash. Type <code>bt</code> to see the stack frames and the lines of code they were executing before the crash (stack frames are the way scope is controlled, so each stack frame is just a scope of your program). When you see a questionable frame (probably one that contains your code), type <code>fr s &lt;framenumber&gt;</code> to select the frame (by whatever number the frame is). <code>lldb</code> will print the line of code that frame was on when it crashed.</p>
<h2 id="miscellaneous-commands">Miscellaneous commands</h2>
<ul>
<li><code>m r 0x000001 -f i</code> or <code>memory read 0x000001 --format i</code> - read the code at memory location <code>0x000001</code></li>
</ul>
<hr />
<p>Debugging C code in a console may seem daunting at first, but if you know a few commands, you can get by pretty well. Let me know if you have any questions on Twitter <span class="citation">@theninjacharlie</span></p>]]></summary>
</entry>
<entry>
    <title>bash_magic</title>
    <link href="http://charliethe.ninja/posts/2015-1-2-bash_magic.html" />
    <id>http://charliethe.ninja/posts/2015-1-2-bash_magic.html</id>
    <published>2015-01-02T00:00:00Z</published>
    <updated>2015-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Bash has a bunch of hidden features that are rarely used, and are extremely powerful. There are magic variables, unknown shortcuts and shorthands that can be extremely helpful to speeding up your workflow. This post is a compilation of some of the best features Bash has to offer (many of these features also apply to Zsh).</p>
<h1 id="shortcuts">Shortcuts</h1>
<p><code>Ctrl E</code>: Move cursor to the end of the current command.</p>
<p><code>Ctrl A</code>: Move cursor to the beginning of the current command.</p>
<p><code>Ctrl U</code>: Delete to beginning of command from current cursor position.</p>
<p><code>Ctrl K</code>: Delete to end of command from current cursor position.</p>
<p><code>Ctrl R</code>: Reverse search history</p>
<p><code>Ctrl X Ctrl-E</code>: Open the current command in $EDITOR (very useful for long commands).</p>
<p><code>Ctrl -</code>: Incremental undo</p>
<p><code>Ctrl L</code>: Clear screen to the top (same thing as <code>clear</code> command)</p>
<h1 id="shorthands-and-magic-variables">Shorthands and Magic variables</h1>
<p><code>!!</code>: The last command</p>
<p><code>!$</code>: The last argument from the last command.</p>
<p><code>![word]</code>: The last command starting with <em>[word]</em></p>
<p><code>![word]:p</code>: Print the last command starting with <em>[word]</em> (but do not run)</p>
<p><code>^[word]^[replacement]</code>: Find last command starting with <em>[word]</em> and re-run it with <em>[replacement]</em>.</p>
<p><code>[command] [argument]{a,b,c}</code>: Run <em>[command]</em> with <em>[argument]</em> three times, each time changing the postfix to <code>a</code>, then <code>b</code>, then <code>c</code>. For example, <code>mkdir test{1,2}</code> would make two directories: <code>test1</code> and <code>test2</code></p>
<p><code>set -o vi</code>: Use vi-like movement to edit commands :)</p>
<h1 id="ps1-variables-for-prompt-customization">PS1 Variables for Prompt Customization</h1>
<p><code>\t</code>: Time (HH:MM:SS)</p>
<p><code>\d</code>: Date (Weekday Month Day)</p>
<p><code>\w</code>: pwd</p>
<p><code>\W</code>: basename of pwd</p>
<p><code>\u</code>: username</p>
<p><code>\h</code>: hostname</p>]]></summary>
</entry>

</feed>
